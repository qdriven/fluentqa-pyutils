# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "qpyone"
version = "0.1.0"
description = " qpyone, a daily qa pytoolkits "
readme = "README.md"
authors = ["fluentqa <hello@fluentqa.xyz>"]
license = "MIT"
repository = "https://github.com/fluentqa/qpyone"
homepage = "https://github.com/fluentqa/qpyone"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = ["QA Python Lib", "Testing", "Software QA Python Libs",
  "Living Tutorials For QA"]  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [#! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
]

[tool.poetry.dependencies]
python = "^3.10"
dynaconf = "^3.1.9"
pydantic = "^1.10.2"
loguru = "^0.6.0"
rich = "^12.5.1"
openpyxl = "^3.0.10"
Jinja2 = "^3.1.2"
httpx = "^0.23.0"
sqlmodel = "^0.0.8"
psycopg2-binary = "^2.9.3"
Faker = "^14.2.0"


[tool.poetry.dev-dependencies]
pytest = "^7.1.2"
pre-commit = "^2.18.1"
pyupgrade = "^2.37.3"
bandit = "^1.7.4"
safety = "^2.1.1"
pylint = "^2.14.5"
black = { version = "^22.6.0", allow-prereleases = true }
darglint = "^1.8.1"
isort = { extras = ["colors"], version = "^5.10.1" }
coverage = "^6.4.4"
coverage-badge = "^1.1.0"
pytest-cov = "^4.0.0"
mypy = "^0.971"

[tool.black]
# https://github.com/psf/black
target-version = ["py310"]
line-length = 88
color = true
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''

[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = 310
line_length = 88

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true
force_single_line = true
combine_as_imports = true
lines_between_types = 1
lines_after_imports = 2
src_paths = ["src", "tests"]
extend_skip = ["setup.py"]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
pretty = true
show_traceback = true
color_output = true
allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytp collector:
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]

[coverage.paths]
source = "fluentqpy"

[coverage.run]
branch = true

[coverage.report]
fail_under = 50
show_missing = true
