# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/

[tool.poetry]
name = "qpyone"
version = "0.1.0"
description = " qpyone, a daily qa pytoolkits "
readme = "README.md"
authors = ["fluentqa <hello@fluentqa.xyz>"]
repository = "https://github.com/fluentqa/qpyone"
homepage = "https://github.com/fluentqa/qpyone"
packages = [
    { include = "qpyone",from="src" },
    {include ="app",from="src"}
]

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = ["QA Python Lib", "Testing", "Software QA Python Libs",
  "Living Tutorials For QA"]  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [#! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
]

[tool.poetry.dependencies]
python = ">=3.10"
fastapi = "^0.110.1"
uvicorn = "^0.29.0"
#outlines = "^0.0.37"
portkey-ai = "^1.2.3"
streamlit = "^1.33.0"
python-dotenv = "^1.0.1"
jupyterlab = "^4.1.5"
httpx = {extras = ["all"], version = "^0.27.0"}
openai = "^1.16.2"
python-pptx = "^0.6.23"
python-docx = "^1.1.0"
python-telegram-bot = "^21.0.1"


[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"
pre-commit = "^3.6.2"
coverage = "^7.4.3"
ruff = "^0.4.9"
mypy = "^1.9.0"
isort = "^5.13.2"
coverage-badge = "^1.1.0"
pytest-cov = "^5.0.0"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytp collector:
norecursedirs = ["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

[tool.coverage.run]
source = ["tests"]

[coverage.paths]
source = "qpyone"

[coverage.run]
branch = true

[coverage.report]
fail_under = 50
show_missing = true

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 88

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.mypy]
strict = true
exclude = ["venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true


[[tool.poetry.source]]
name = "ali"
url = "https://mirrors.aliyun.com/pypi/simple/"
priority = "primary"


[[tool.poetry.source]]
name = "tencent"
url = "https://mirrors.cloud.tencent.com/pypi/simple/"
priority = "primary"


[[tool.poetry.source]]
name = "tsinghua"
url = "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/"
priority = "default"
